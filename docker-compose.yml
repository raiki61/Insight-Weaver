# このファイルで管理するコンテナ（サービス）群を定義します。
# (補足: トップレベルの 'version' キーは古い形式のため削除しました)
services:
  # --- バックエンドサービスの設定 ---
  backend:
    # コンテナの元となるDockerイメージをビルドするための設定
    build:
      # ビルドのコンテキスト（基準となるパス）。
      # ここではプロジェクトのルートディレクトリを指定しています。
      context: .
      # ビルドに使用するDockerfileのパスを指定します。
      dockerfile: ./services/backend/Dockerfile
    # ポートのマッピング設定（"ホストOSのポート:コンテナ内のポート"）
    ports:
      # ホストの8000番ポートを、コンテナの8000番ポートに接続します。
      # これにより、`localhost:8000`でFastAPIアプリにアクセスできます。
      - "8000:8000"
      # ホストの5678番ポートを、コンテナの5678番ポートに接続します。
      # これはVS Codeのデバッガが接続するために使用します。
      - "5678:5678"
    # ボリュームのマッピング設定（"ホストOSのパス:コンテナ内のパス"）
    # ソースコードをコンテナに同期させ、ローカルでの変更を即座に反映させるために使います。
    volumes:
      # バックエンドのソースコードを同期します。
      - ./services/backend:/app/services/backend
      # 共通パッケージのソースコードを同期します。
      - ./packages:/app/packages
    # コンテナ起動時に実行されるコマンドを上書きします。
    # シェルを経由しないリスト形式でコマンドを指定することで、解釈エラーを防ぎます。
    command:
      - "python"
      - "-m"
      - "debugpy"
      - "--wait-for-client"
      - "--listen"
      - "0.0.0.0:5678"
      - "-m"
      - "uvicorn"
      - "services.backend.main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8000"
      - "--reload"

  # --- フロントエンドサービスの設定 ---
  frontend:
    build:
      context: .
      dockerfile: ./services/frontend/Dockerfile
    ports:
      # ホストの8080番ポートを、コンテナの80番ポートに接続します。
      # (Nginxや開発サーバーのデフォルトポートが80であることが多いため)
      - "8080:80"
    volumes:
      # フロントエンドのソースコードを同期します。
      - ./services/frontend:/app
      # `node_modules`をコンテナ内に保持するためのテクニック。
      # ホスト側の`node_modules`でコンテナ内の`node_modules`が上書きされるのを防ぎます。
      - /app/node_modules

# コンテナが接続するネットワークを定義します。
networks:
  default:
    # Dockerが自動で生成するネットワーク名ではなく、固定の名前を付けます。
    # プロジェクト間でネットワーク名が衝突するのを防いだり、管理しやすくしたりする効果があります。
    name: insight-weaver_default
